// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mygrpc.proto

/*
Package mygrpc is a generated protocol buffer package.

It is generated from these files:
	mygrpc.proto

It has these top-level messages:
	Service
	ServiceChain
	ServiceChains
	ServiceDescriptor
	ServiceChainDescriptor
	ServiceChainDescriptors
*/
package mygrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Service struct {
	// name of the service
	SvcName string `protobuf:"bytes,1,opt,name=svc_name,json=svcName" json:"svc_name,omitempty"`
	// position of the service in the service chain
	SvcPos int32 `protobuf:"varint,2,opt,name=svc_pos,json=svcPos" json:"svc_pos,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetSvcName() string {
	if m != nil {
		return m.SvcName
	}
	return ""
}

func (m *Service) GetSvcPos() int32 {
	if m != nil {
		return m.SvcPos
	}
	return 0
}

type ServiceChain struct {
	// unique identifier of the service chain
	ChainId int32 `protobuf:"varint,1,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	// length of the service chain
	ChainLen int32 `protobuf:"varint,2,opt,name=chain_len,json=chainLen" json:"chain_len,omitempty"`
	// services froming the service chain
	Chain []*Service `protobuf:"bytes,3,rep,name=chain" json:"chain,omitempty"`
}

func (m *ServiceChain) Reset()                    { *m = ServiceChain{} }
func (m *ServiceChain) String() string            { return proto.CompactTextString(m) }
func (*ServiceChain) ProtoMessage()               {}
func (*ServiceChain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceChain) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ServiceChain) GetChainLen() int32 {
	if m != nil {
		return m.ChainLen
	}
	return 0
}

func (m *ServiceChain) GetChain() []*Service {
	if m != nil {
		return m.Chain
	}
	return nil
}

type ServiceChains struct {
	Chains []*ServiceChain `protobuf:"bytes,1,rep,name=chains" json:"chains,omitempty"`
}

func (m *ServiceChains) Reset()                    { *m = ServiceChains{} }
func (m *ServiceChains) String() string            { return proto.CompactTextString(m) }
func (*ServiceChains) ProtoMessage()               {}
func (*ServiceChains) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceChains) GetChains() []*ServiceChain {
	if m != nil {
		return m.Chains
	}
	return nil
}

type ServiceDescriptor struct {
	// name of the service
	SvcName string `protobuf:"bytes,1,opt,name=svc_name,json=svcName" json:"svc_name,omitempty"`
	// description of the service
	SvcDesc string `protobuf:"bytes,2,opt,name=svc_desc,json=svcDesc" json:"svc_desc,omitempty"`
	// position of the service in the service chain
	SvcPos int32 `protobuf:"varint,3,opt,name=svc_pos,json=svcPos" json:"svc_pos,omitempty"`
}

func (m *ServiceDescriptor) Reset()                    { *m = ServiceDescriptor{} }
func (m *ServiceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*ServiceDescriptor) ProtoMessage()               {}
func (*ServiceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServiceDescriptor) GetSvcName() string {
	if m != nil {
		return m.SvcName
	}
	return ""
}

func (m *ServiceDescriptor) GetSvcDesc() string {
	if m != nil {
		return m.SvcDesc
	}
	return ""
}

func (m *ServiceDescriptor) GetSvcPos() int32 {
	if m != nil {
		return m.SvcPos
	}
	return 0
}

type ServiceChainDescriptor struct {
	// unique identifier of the service chain
	ChainId int32 `protobuf:"varint,1,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	// length of the service chain
	ChainLen int32 `protobuf:"varint,2,opt,name=chain_len,json=chainLen" json:"chain_len,omitempty"`
	// descriptions of the services froming the service chain
	ChainDesc []*ServiceDescriptor `protobuf:"bytes,3,rep,name=chain_desc,json=chainDesc" json:"chain_desc,omitempty"`
}

func (m *ServiceChainDescriptor) Reset()                    { *m = ServiceChainDescriptor{} }
func (m *ServiceChainDescriptor) String() string            { return proto.CompactTextString(m) }
func (*ServiceChainDescriptor) ProtoMessage()               {}
func (*ServiceChainDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServiceChainDescriptor) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ServiceChainDescriptor) GetChainLen() int32 {
	if m != nil {
		return m.ChainLen
	}
	return 0
}

func (m *ServiceChainDescriptor) GetChainDesc() []*ServiceDescriptor {
	if m != nil {
		return m.ChainDesc
	}
	return nil
}

type ServiceChainDescriptors struct {
	ChainDescs []*ServiceChainDescriptor `protobuf:"bytes,1,rep,name=chain_descs,json=chainDescs" json:"chain_descs,omitempty"`
}

func (m *ServiceChainDescriptors) Reset()                    { *m = ServiceChainDescriptors{} }
func (m *ServiceChainDescriptors) String() string            { return proto.CompactTextString(m) }
func (*ServiceChainDescriptors) ProtoMessage()               {}
func (*ServiceChainDescriptors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceChainDescriptors) GetChainDescs() []*ServiceChainDescriptor {
	if m != nil {
		return m.ChainDescs
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "mygrpc.Service")
	proto.RegisterType((*ServiceChain)(nil), "mygrpc.ServiceChain")
	proto.RegisterType((*ServiceChains)(nil), "mygrpc.ServiceChains")
	proto.RegisterType((*ServiceDescriptor)(nil), "mygrpc.ServiceDescriptor")
	proto.RegisterType((*ServiceChainDescriptor)(nil), "mygrpc.ServiceChainDescriptor")
	proto.RegisterType((*ServiceChainDescriptors)(nil), "mygrpc.ServiceChainDescriptors")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyGrpc service

type MyGrpcClient interface {
	// Get a service chain descriptor according to a request indicating to a single chain
	GetChainReqResp(ctx context.Context, in *ServiceChain, opts ...grpc.CallOption) (*ServiceChainDescriptor, error)
	// Get service chain descriptors according to a request indicating to multiple chains
	GetChainsReqResps(ctx context.Context, in *ServiceChains, opts ...grpc.CallOption) (MyGrpc_GetChainsReqRespsClient, error)
	// Get a descriptor describing multiple service chains according to requests of which indicating to a single chain each
	GetChainsReqsResp(ctx context.Context, opts ...grpc.CallOption) (MyGrpc_GetChainsReqsRespClient, error)
	// Get multiple service chain descriptors according to requests of which indicating to a single chain each
	GetChainsReqsResps(ctx context.Context, opts ...grpc.CallOption) (MyGrpc_GetChainsReqsRespsClient, error)
}

type myGrpcClient struct {
	cc *grpc.ClientConn
}

func NewMyGrpcClient(cc *grpc.ClientConn) MyGrpcClient {
	return &myGrpcClient{cc}
}

func (c *myGrpcClient) GetChainReqResp(ctx context.Context, in *ServiceChain, opts ...grpc.CallOption) (*ServiceChainDescriptor, error) {
	out := new(ServiceChainDescriptor)
	err := grpc.Invoke(ctx, "/mygrpc.MyGrpc/GetChainReqResp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGrpcClient) GetChainsReqResps(ctx context.Context, in *ServiceChains, opts ...grpc.CallOption) (MyGrpc_GetChainsReqRespsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MyGrpc_serviceDesc.Streams[0], c.cc, "/mygrpc.MyGrpc/GetChainsReqResps", opts...)
	if err != nil {
		return nil, err
	}
	x := &myGrpcGetChainsReqRespsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyGrpc_GetChainsReqRespsClient interface {
	Recv() (*ServiceChainDescriptor, error)
	grpc.ClientStream
}

type myGrpcGetChainsReqRespsClient struct {
	grpc.ClientStream
}

func (x *myGrpcGetChainsReqRespsClient) Recv() (*ServiceChainDescriptor, error) {
	m := new(ServiceChainDescriptor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myGrpcClient) GetChainsReqsResp(ctx context.Context, opts ...grpc.CallOption) (MyGrpc_GetChainsReqsRespClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MyGrpc_serviceDesc.Streams[1], c.cc, "/mygrpc.MyGrpc/GetChainsReqsResp", opts...)
	if err != nil {
		return nil, err
	}
	x := &myGrpcGetChainsReqsRespClient{stream}
	return x, nil
}

type MyGrpc_GetChainsReqsRespClient interface {
	Send(*ServiceChain) error
	CloseAndRecv() (*ServiceChainDescriptors, error)
	grpc.ClientStream
}

type myGrpcGetChainsReqsRespClient struct {
	grpc.ClientStream
}

func (x *myGrpcGetChainsReqsRespClient) Send(m *ServiceChain) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myGrpcGetChainsReqsRespClient) CloseAndRecv() (*ServiceChainDescriptors, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServiceChainDescriptors)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myGrpcClient) GetChainsReqsResps(ctx context.Context, opts ...grpc.CallOption) (MyGrpc_GetChainsReqsRespsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MyGrpc_serviceDesc.Streams[2], c.cc, "/mygrpc.MyGrpc/GetChainsReqsResps", opts...)
	if err != nil {
		return nil, err
	}
	x := &myGrpcGetChainsReqsRespsClient{stream}
	return x, nil
}

type MyGrpc_GetChainsReqsRespsClient interface {
	Send(*ServiceChain) error
	Recv() (*ServiceChainDescriptor, error)
	grpc.ClientStream
}

type myGrpcGetChainsReqsRespsClient struct {
	grpc.ClientStream
}

func (x *myGrpcGetChainsReqsRespsClient) Send(m *ServiceChain) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myGrpcGetChainsReqsRespsClient) Recv() (*ServiceChainDescriptor, error) {
	m := new(ServiceChainDescriptor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MyGrpc service

type MyGrpcServer interface {
	// Get a service chain descriptor according to a request indicating to a single chain
	GetChainReqResp(context.Context, *ServiceChain) (*ServiceChainDescriptor, error)
	// Get service chain descriptors according to a request indicating to multiple chains
	GetChainsReqResps(*ServiceChains, MyGrpc_GetChainsReqRespsServer) error
	// Get a descriptor describing multiple service chains according to requests of which indicating to a single chain each
	GetChainsReqsResp(MyGrpc_GetChainsReqsRespServer) error
	// Get multiple service chain descriptors according to requests of which indicating to a single chain each
	GetChainsReqsResps(MyGrpc_GetChainsReqsRespsServer) error
}

func RegisterMyGrpcServer(s *grpc.Server, srv MyGrpcServer) {
	s.RegisterService(&_MyGrpc_serviceDesc, srv)
}

func _MyGrpc_GetChainReqResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGrpcServer).GetChainReqResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mygrpc.MyGrpc/GetChainReqResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGrpcServer).GetChainReqResp(ctx, req.(*ServiceChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGrpc_GetChainsReqResps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceChains)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyGrpcServer).GetChainsReqResps(m, &myGrpcGetChainsReqRespsServer{stream})
}

type MyGrpc_GetChainsReqRespsServer interface {
	Send(*ServiceChainDescriptor) error
	grpc.ServerStream
}

type myGrpcGetChainsReqRespsServer struct {
	grpc.ServerStream
}

func (x *myGrpcGetChainsReqRespsServer) Send(m *ServiceChainDescriptor) error {
	return x.ServerStream.SendMsg(m)
}

func _MyGrpc_GetChainsReqsResp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyGrpcServer).GetChainsReqsResp(&myGrpcGetChainsReqsRespServer{stream})
}

type MyGrpc_GetChainsReqsRespServer interface {
	SendAndClose(*ServiceChainDescriptors) error
	Recv() (*ServiceChain, error)
	grpc.ServerStream
}

type myGrpcGetChainsReqsRespServer struct {
	grpc.ServerStream
}

func (x *myGrpcGetChainsReqsRespServer) SendAndClose(m *ServiceChainDescriptors) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myGrpcGetChainsReqsRespServer) Recv() (*ServiceChain, error) {
	m := new(ServiceChain)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyGrpc_GetChainsReqsResps_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyGrpcServer).GetChainsReqsResps(&myGrpcGetChainsReqsRespsServer{stream})
}

type MyGrpc_GetChainsReqsRespsServer interface {
	Send(*ServiceChainDescriptor) error
	Recv() (*ServiceChain, error)
	grpc.ServerStream
}

type myGrpcGetChainsReqsRespsServer struct {
	grpc.ServerStream
}

func (x *myGrpcGetChainsReqsRespsServer) Send(m *ServiceChainDescriptor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myGrpcGetChainsReqsRespsServer) Recv() (*ServiceChain, error) {
	m := new(ServiceChain)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MyGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mygrpc.MyGrpc",
	HandlerType: (*MyGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChainReqResp",
			Handler:    _MyGrpc_GetChainReqResp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChainsReqResps",
			Handler:       _MyGrpc_GetChainsReqResps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChainsReqsResp",
			Handler:       _MyGrpc_GetChainsReqsResp_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetChainsReqsResps",
			Handler:       _MyGrpc_GetChainsReqsResps_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mygrpc.proto",
}

func init() { proto.RegisterFile("mygrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x5f, 0x4b, 0x32, 0x41,
	0x14, 0xc6, 0x1d, 0xc5, 0xf5, 0xf5, 0xe8, 0x8b, 0x78, 0xa8, 0x5c, 0x0b, 0x4a, 0x16, 0x82, 0xbd,
	0x08, 0x11, 0xbb, 0xe9, 0x46, 0xba, 0x28, 0x10, 0xa1, 0x44, 0xa6, 0xbb, 0x6e, 0x44, 0xc7, 0xa1,
	0x16, 0xda, 0x3f, 0xed, 0x91, 0x05, 0xbf, 0x42, 0xdf, 0xab, 0xef, 0x15, 0x3b, 0x33, 0xe6, 0x6a,
	0x8b, 0x82, 0x77, 0x33, 0xf3, 0x9c, 0xf3, 0x3b, 0xcf, 0x79, 0x96, 0x85, 0xba, 0xbf, 0x7a, 0x8b,
	0x23, 0xd1, 0x8d, 0xe2, 0x70, 0x19, 0xa2, 0xa5, 0x6f, 0xce, 0x00, 0x2a, 0x2f, 0x32, 0x4e, 0x3c,
	0x21, 0xb1, 0x0d, 0xff, 0x28, 0x11, 0xd3, 0x60, 0xe6, 0x4b, 0x9b, 0x75, 0x98, 0x5b, 0xe5, 0x15,
	0x4a, 0xc4, 0x78, 0xe6, 0x4b, 0x6c, 0x41, 0x7a, 0x9c, 0x46, 0x21, 0xd9, 0xc5, 0x0e, 0x73, 0xcb,
	0xdc, 0xa2, 0x44, 0x4c, 0x42, 0x72, 0x7c, 0xa8, 0x9b, 0xf6, 0x87, 0xf7, 0x99, 0x17, 0xa4, 0x0c,
	0x91, 0x1e, 0xa6, 0xde, 0x42, 0x31, 0xca, 0xbc, 0xa2, 0xee, 0xa3, 0x05, 0x5e, 0x40, 0x55, 0x4b,
	0x1f, 0x32, 0x30, 0x14, 0x5d, 0xfb, 0x24, 0x03, 0xbc, 0x86, 0xb2, 0x3a, 0xdb, 0xa5, 0x4e, 0xc9,
	0xad, 0xf5, 0x1b, 0x5d, 0x63, 0xd6, 0xc0, 0xb9, 0x56, 0x9d, 0x01, 0xfc, 0xcf, 0x8e, 0x23, 0xbc,
	0x01, 0x4b, 0x29, 0x64, 0x33, 0xd5, 0x78, 0xb2, 0xd3, 0xa8, 0xca, 0xb8, 0xa9, 0x71, 0xe6, 0xd0,
	0x34, 0xef, 0x8f, 0x92, 0x44, 0xec, 0x45, 0xcb, 0x30, 0xde, 0xb7, 0xb6, 0x91, 0x16, 0x92, 0x84,
	0x72, 0xac, 0xa5, 0xb4, 0x37, 0x9b, 0x48, 0x69, 0x2b, 0x91, 0x2f, 0x06, 0x67, 0xd9, 0xe1, 0xdb,
	0x93, 0x8e, 0x0a, 0xe7, 0x0e, 0x40, 0x8b, 0xca, 0x88, 0x4e, 0xa8, 0xbd, 0xb3, 0xe8, 0x66, 0x0c,
	0xd7, 0xa4, 0xf4, 0xc1, 0x79, 0x85, 0x56, 0xbe, 0x17, 0xc2, 0x7b, 0xa8, 0x6d, 0xa0, 0xeb, 0xf8,
	0x2e, 0xf3, 0xe2, 0xcb, 0xa0, 0xe1, 0x17, 0x4d, 0xfd, 0xef, 0x22, 0x58, 0xcf, 0xab, 0x61, 0x1c,
	0x09, 0x1c, 0x41, 0x63, 0x28, 0x97, 0x3a, 0x6b, 0xf9, 0xc9, 0x25, 0x45, 0x98, 0xfb, 0x21, 0xce,
	0x0f, 0xf0, 0x9d, 0x02, 0x8e, 0xa1, 0xb9, 0x46, 0x91, 0x61, 0x11, 0x9e, 0xe6, 0xb5, 0xd1, 0x61,
	0x5a, 0x8f, 0xed, 0xf2, 0x68, 0x8f, 0xb9, 0xab, 0xfd, 0x38, 0x72, 0x0a, 0x2e, 0xc3, 0x09, 0xe0,
	0x1f, 0x1e, 0x1d, 0xbb, 0xad, 0xcb, 0x7a, 0x6c, 0x6e, 0xa9, 0x1f, 0xf2, 0xf6, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x23, 0x9e, 0x47, 0xdc, 0xa0, 0x03, 0x00, 0x00,
}
